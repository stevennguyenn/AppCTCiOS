//
//  ChangePasswordViewController.swift
//  APP_CTCT
//
//  Created vinova on 11/15/18.
//  Copyright © 2018 vinova. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class ChangePasswordViewController: UIViewController {
   
    @IBOutlet weak var btnChange: CustomButton!
    @IBOutlet weak var currentPass: ViewTextField!
    @IBOutlet weak var newPass: ViewTextField!
    @IBOutlet weak var confirmPass: ViewTextField!
    
	var presenter: ChangePasswordPresenterProtocol?

	override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
    }
    
    func setupView(){
        currentPass.setDataView(textLabel: "Current Password", placeText: "Current Password")
        newPass.setDataView(textLabel: "New Password", placeText: "New Password")
        confirmPass.setDataView(textLabel: "Confirm Password", placeText: "Confirm Password")
        btnChange.setTextButton(tempText: "Change Password")
        btnChange.delegate = self
    }
}
extension ChangePasswordViewController: ProcessButton{
    func process() {
        presenter?.notifyInterator(currentPass: currentPass.getTextTextField(), newPass: newPass.getTextTextField(), confirmPass: confirmPass.getTextTextField())
    }
}

extension ChangePasswordViewController: ChangePasswordViewProtocol{
    func currentPassEmpty() {
        currentPass.setErrorView(error: "Current Password is empty")
    }
    
    func newPassEmpty() {
        newPass.setErrorView(error: "New Password is empty")
    }
    
    
    func confirmPassEmpty() {
        confirmPass.setErrorView(error: "Confirm Password is empty")
    }
    
    func currentPassEqualNewPass() {
        
    }
    
    func newPassDiffenceConfirmPass() {
        
    }
    
    func successed() {
        let vc = ChangeSuccessedViewController()
        vc.delegate = self
        self.present(vc,animated: true)
    }
    
    func failedNetwork() {
        
    }
}
extension ChangePasswordViewController: ProcessBackRootViewController{
    func backRoot() {
        presenter?.backRoot()
    }
}
