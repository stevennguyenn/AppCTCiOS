//
//  MainViewController.swift
//  APP_CTCT
//
//  Created vinova on 11/7/18.
//  Copyright © 2018 vinova. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class MainViewController: UIViewController, MainViewProtocol {

	var presenter: MainPresenterProtocol?
    var isShow = false
    var widthSlideMenu = 0
    
    var arrMenu = Data.arrCellMenu
    var dataHeader = Data.dataHeader

    @IBOutlet weak var widthSlide: NSLayoutConstraint!
    @IBOutlet weak var tbSlideMenu: UITableView!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        widthSlideMenu = Int(2 * view.frame.width / 3)
        setupView()
        addSwipeGesture()
        registerCell()
    }
    
    func registerCell(){
        tbSlideMenu.delegate = self
        tbSlideMenu.dataSource = self
        let nib = UINib.init(nibName: "CellMain", bundle: nil)
        tbSlideMenu.register(nib, forCellReuseIdentifier: "CellMain")
        let nibHeader = UINib.init(nibName: "CellHeader", bundle: nil)
        tbSlideMenu.register(nibHeader, forCellReuseIdentifier: "CellHeader")
    }
    
    func setupView(){
        let leftButtonItem = UIBarButtonItem.init(image: #imageLiteral(resourceName: "slide"), style: .plain, target: self, action: #selector(slideMenu))
        self.navigationItem.leftBarButtonItem = leftButtonItem
        navigationController?.navigationBar.isHidden = false
    }
    
    @objc func slideMenu(){
        if isShow {
            UIView.animate(withDuration: 0.5) {
                self.widthSlide.constant = 0
                self.view.layoutIfNeeded()
            }
            self.isShow = false
            return
        }
        UIView.animate(withDuration: 0.5) {
            self.widthSlide.constant = CGFloat(self.widthSlideMenu)
            self.view.layoutIfNeeded()
        }
        isShow = true
    }
    
    func addSwipeGesture(){
        //swipe right
        let rightGesture = UISwipeGestureRecognizer(target: self, action: #selector(right))
        rightGesture.direction = .right
        view.addGestureRecognizer(rightGesture)
        //swipe left
        let leftGesture = UISwipeGestureRecognizer(target: self, action: #selector(left))
        leftGesture.direction = .left
        view.addGestureRecognizer(leftGesture)
    }
    @objc func left(){
        if isShow {
            UIView.animate(withDuration: 0.5) {
                self.widthSlide.constant = 0
                self.view.layoutIfNeeded()
            }
            self.isShow = false
        }
    }
    
    @objc func right(){
        if isShow == false {
            UIView.animate(withDuration: 0.5) {
                self.widthSlide.constant = CGFloat(self.widthSlideMenu)
                self.view.layoutIfNeeded()
            }
            self.isShow = true
        }
    }
}

extension MainViewController: UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return arrMenu.count + 1
    }
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if indexPath.row == 0 {
            guard let cell = tableView.dequeueReusableCell(withIdentifier: "CellHeader") as? CellHeader else {
                return UITableViewCell()
            }
            cell.setupCell(header: dataHeader)
            return cell
        }
        guard let cell = tableView.dequeueReusableCell(withIdentifier: "CellMain") as? CellMain else {
            return UITableViewCell()
        }
        cell.setupCell(menu: arrMenu[indexPath.row - 1])
        return cell
    }
}
extension MainViewController: UITableViewDelegate{
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        if indexPath.row == 0 {
            return 180
        }
        return 60
    }
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        switch indexPath.row {
        case 1:
            presenter?.openProfile()
        default:
            print("default")
        }
    }
}
